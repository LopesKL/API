// <auto-generated />
using System;
using API.Infra.SqlServer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(ApiServerContext))]
    [Migration("20250218182438_alter_table_atividadefilho_atividadeusuario")]
    partial class alter_table_atividadefilho_atividadeusuario
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Domain.Projeto.Alteracoes", b =>
                {
                    b.Property<Guid>("IdAlteracao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataEHora")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NomeTabela")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoOperacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ValoresAntigos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValoresNovos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAlteracao");

                    b.ToTable("Alteracoes");
                });

            modelBuilder.Entity("API.Domain.Projeto.Atividade", b =>
                {
                    b.Property<Guid>("IdAtividade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Cobrado")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Files")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HorasEstimadas")
                        .HasColumnType("int");

                    b.Property<int>("HorasTotais")
                        .HasColumnType("int");

                    b.Property<Guid>("IdAtividadeFilho")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Progresso")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdAtividade");

                    b.HasIndex("IdAtividadeFilho");

                    b.ToTable("Atividade");
                });

            modelBuilder.Entity("API.Domain.Projeto.AtividadeFilho", b =>
                {
                    b.Property<Guid>("IdAtividadeFilho")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Files")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HorasEstimadas")
                        .HasColumnType("int");

                    b.Property<Guid>("IdAtividadePai")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdAtividadeFilho");

                    b.HasIndex("IdAtividadePai");

                    b.ToTable("AtividadeFilho");
                });

            modelBuilder.Entity("API.Domain.Projeto.AtividadePai", b =>
                {
                    b.Property<Guid>("IdAtividadePai")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Files")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HorasCobradas")
                        .HasColumnType("int");

                    b.Property<int>("HorasEstimadas")
                        .HasColumnType("int");

                    b.Property<int?>("HorasNaoCobradas")
                        .HasColumnType("int");

                    b.Property<Guid>("IdProjeto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdAtividadePai");

                    b.HasIndex("IdProjeto");

                    b.ToTable("AtividadePai");
                });

            modelBuilder.Entity("API.Domain.Projeto.AtividadeUsuario", b =>
                {
                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdAtividade")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AtividadeFilhoIdAtividadeFilho")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("estrela")
                        .HasColumnType("bit");

                    b.HasKey("IdUsuario", "IdAtividade");

                    b.HasIndex("AtividadeFilhoIdAtividadeFilho");

                    b.HasIndex("IdAtividade");

                    b.ToTable("AtividadeUsuario");
                });

            modelBuilder.Entity("API.Domain.Projeto.Cliente", b =>
                {
                    b.Property<Guid>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Moeda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdCliente");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("API.Domain.Projeto.Comentario", b =>
                {
                    b.Property<Guid>("IdComentario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Files")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IdAtividade")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdAtividadeFilho")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdAtividadePai")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdLancamento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdProjetos")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Texto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdComentario");

                    b.HasIndex("IdAtividade");

                    b.HasIndex("IdAtividadeFilho");

                    b.HasIndex("IdAtividadePai");

                    b.HasIndex("IdProjetos");

                    b.ToTable("Comentario");
                });

            modelBuilder.Entity("API.Domain.Projeto.Empresa", b =>
                {
                    b.Property<Guid>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdEmpresa");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("API.Domain.Projeto.Habilidade", b =>
                {
                    b.Property<Guid>("IdHabilidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdHabilidade");

                    b.ToTable("Habilidade");
                });

            modelBuilder.Entity("API.Domain.Projeto.Lancamento", b =>
                {
                    b.Property<Guid>("IdLancamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Cobrado")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HorarioFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HorarioInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("Horas")
                        .HasColumnType("int");

                    b.Property<Guid?>("IdAtividadeFilho")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdAtividadePai")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProjeto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.Property<Guid?>("idTag")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdLancamento");

                    b.HasIndex("IdAtividadeFilho");

                    b.HasIndex("IdAtividadePai");

                    b.HasIndex("IdProjeto");

                    b.HasIndex("idTag");

                    b.ToTable("Lancamento");
                });

            modelBuilder.Entity("API.Domain.Projeto.ProjetoUsuario", b =>
                {
                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProjeto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdUsuario", "IdProjeto");

                    b.HasIndex("IdProjeto");

                    b.ToTable("ProjetoUsuario");
                });

            modelBuilder.Entity("API.Domain.Projeto.Projetos", b =>
                {
                    b.Property<Guid>("IdProjetos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Files")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gastos")
                        .HasColumnType("int");

                    b.Property<int>("HorasCobradas")
                        .HasColumnType("int");

                    b.Property<int>("HorasEstimadas")
                        .HasColumnType("int");

                    b.Property<int>("HorasNaoCobradas")
                        .HasColumnType("int");

                    b.Property<Guid>("IdCliente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Moeda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrcamentoInicial")
                        .HasColumnType("int");

                    b.Property<bool>("ProjetoConcluido")
                        .HasColumnType("bit");

                    b.Property<int>("SaldoFinal")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdProjetos");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("Projetos");
                });

            modelBuilder.Entity("API.Domain.Projeto.Tag", b =>
                {
                    b.Property<Guid>("IdTag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdTag");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("API.Domain.Projeto.UsuarioHabilidade", b =>
                {
                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdHabilidade")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdUsuario", "IdHabilidade");

                    b.HasIndex("IdHabilidade");

                    b.ToTable("UsuarioHabilidade");
                });

            modelBuilder.Entity("API.Domain.Users.Auth.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Empresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaxaFaturamento")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Domain.Users.Auth.AppRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("AppRole");

                    b.HasData(
                        new
                        {
                            Id = "23D9D409-D7AA-4966-9047-48C04B41F0A1",
                            Name = "RoleAdmin",
                            NormalizedName = "ROLEADMIN"
                        },
                        new
                        {
                            Id = "373C7921-DF59-4D99-9827-521F7FBC97B6",
                            Name = "RoleProjectManager",
                            NormalizedName = "ROLEPROJECTMANAGER"
                        },
                        new
                        {
                            Id = "B47591C2-1033-4543-B400-83B83C63B1BD",
                            Name = "RoleUser",
                            NormalizedName = "ROLEUSER"
                        });
                });

            modelBuilder.Entity("API.Domain.Users.Auth.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("AppUserId");

                    b.HasDiscriminator().HasValue("AppUserRole");
                });

            modelBuilder.Entity("API.Domain.Projeto.Atividade", b =>
                {
                    b.HasOne("API.Domain.Projeto.AtividadeFilho", "AtividadeFilho")
                        .WithMany("Atividades")
                        .HasForeignKey("IdAtividadeFilho")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AtividadeFilho");
                });

            modelBuilder.Entity("API.Domain.Projeto.AtividadeFilho", b =>
                {
                    b.HasOne("API.Domain.Projeto.AtividadePai", "AtividadePai")
                        .WithMany("AtividadeFilho")
                        .HasForeignKey("IdAtividadePai")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AtividadePai");
                });

            modelBuilder.Entity("API.Domain.Projeto.AtividadePai", b =>
                {
                    b.HasOne("API.Domain.Projeto.Projetos", "Projetos")
                        .WithMany("AtividadePai")
                        .HasForeignKey("IdProjeto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Projetos");
                });

            modelBuilder.Entity("API.Domain.Projeto.AtividadeUsuario", b =>
                {
                    b.HasOne("API.Domain.Projeto.AtividadeFilho", null)
                        .WithMany("AtividadeUsuario")
                        .HasForeignKey("AtividadeFilhoIdAtividadeFilho")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Domain.Projeto.Atividade", "Atividade")
                        .WithMany("AtividadeUsuario")
                        .HasForeignKey("IdAtividade")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Atividade");
                });

            modelBuilder.Entity("API.Domain.Projeto.Comentario", b =>
                {
                    b.HasOne("API.Domain.Projeto.Atividade", "Atividade")
                        .WithMany("Comentario")
                        .HasForeignKey("IdAtividade")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Domain.Projeto.AtividadeFilho", "AtividadeFilho")
                        .WithMany("Comentario")
                        .HasForeignKey("IdAtividadeFilho")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Domain.Projeto.AtividadePai", "AtividadePai")
                        .WithMany("Comentario")
                        .HasForeignKey("IdAtividadePai")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Domain.Projeto.Projetos", "Projetos")
                        .WithMany("Comentario")
                        .HasForeignKey("IdProjetos")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Atividade");

                    b.Navigation("AtividadeFilho");

                    b.Navigation("AtividadePai");

                    b.Navigation("Projetos");
                });

            modelBuilder.Entity("API.Domain.Projeto.Lancamento", b =>
                {
                    b.HasOne("API.Domain.Projeto.AtividadeFilho", "AtividadeFilho")
                        .WithMany("Lancamento")
                        .HasForeignKey("IdAtividadeFilho")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Domain.Projeto.AtividadePai", "AtividadePai")
                        .WithMany("Lancamento")
                        .HasForeignKey("IdAtividadePai")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Domain.Projeto.Projetos", "Projetos")
                        .WithMany("Lancamento")
                        .HasForeignKey("IdProjeto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Domain.Projeto.Tag", "Tag")
                        .WithMany("Lancamento")
                        .HasForeignKey("idTag")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AtividadeFilho");

                    b.Navigation("AtividadePai");

                    b.Navigation("Projetos");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("API.Domain.Projeto.ProjetoUsuario", b =>
                {
                    b.HasOne("API.Domain.Projeto.Projetos", "Projetos")
                        .WithMany("ProjetoUsuario")
                        .HasForeignKey("IdProjeto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Projetos");
                });

            modelBuilder.Entity("API.Domain.Projeto.Projetos", b =>
                {
                    b.HasOne("API.Domain.Projeto.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Domain.Projeto.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("API.Domain.Projeto.UsuarioHabilidade", b =>
                {
                    b.HasOne("API.Domain.Projeto.Habilidade", "Habilidade")
                        .WithMany("UsuarioHabilidades")
                        .HasForeignKey("IdHabilidade")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Habilidade");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API.Domain.Users.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API.Domain.Users.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Domain.Users.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API.Domain.Users.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Domain.Users.Auth.AppUserRole", b =>
                {
                    b.HasOne("API.Domain.Users.Auth.AppUser", "AppUser")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("AppUserId");

                    b.HasOne("API.Domain.Users.Auth.AppRole", "AppRole")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId1");

                    b.Navigation("AppRole");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("API.Domain.Projeto.Atividade", b =>
                {
                    b.Navigation("AtividadeUsuario");

                    b.Navigation("Comentario");
                });

            modelBuilder.Entity("API.Domain.Projeto.AtividadeFilho", b =>
                {
                    b.Navigation("AtividadeUsuario");

                    b.Navigation("Atividades");

                    b.Navigation("Comentario");

                    b.Navigation("Lancamento");
                });

            modelBuilder.Entity("API.Domain.Projeto.AtividadePai", b =>
                {
                    b.Navigation("AtividadeFilho");

                    b.Navigation("Comentario");

                    b.Navigation("Lancamento");
                });

            modelBuilder.Entity("API.Domain.Projeto.Habilidade", b =>
                {
                    b.Navigation("UsuarioHabilidades");
                });

            modelBuilder.Entity("API.Domain.Projeto.Projetos", b =>
                {
                    b.Navigation("AtividadePai");

                    b.Navigation("Comentario");

                    b.Navigation("Lancamento");

                    b.Navigation("ProjetoUsuario");
                });

            modelBuilder.Entity("API.Domain.Projeto.Tag", b =>
                {
                    b.Navigation("Lancamento");
                });

            modelBuilder.Entity("API.Domain.Users.Auth.AppUser", b =>
                {
                    b.Navigation("AppUserRoles");
                });

            modelBuilder.Entity("API.Domain.Users.Auth.AppRole", b =>
                {
                    b.Navigation("AppUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
